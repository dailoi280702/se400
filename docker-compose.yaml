version: "3.9"

x-airflow-common: &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow}
  # build: .
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${DB_USER}:${DB_PASS}@${DB_HOST}/${DB_NAME}
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${DB_USER}:${DB_PASS}@${DB_HOST}/${DB_NAME}
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session"
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    postgres:
      condition: service_started
  networks:
    - backend-net

services:
  api-gateway:
    image: traefik:latest
    command: --api.insecure=true --providers.docker
    ports:
      - "${GATEWAY_PORT}:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - traefik-net

  backend:
    build: backend
    environment:
      SERVER_PORT: ${SERVER_PORT}
      SENTRY_DSN: ${SENTRY_DSN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backendRouter.rule=PathPrefix(`/api`)"
      - "traefik.http.services.backendRouter.loadbalancer.server.port=${SERVER_PORT}"
      - "traefik.docker.network=traefik-net"
    networks:
      - traefik-net
      - backend-net
    depends_on:
      - postgres
      - redis

  frontend:
    build: frontend
    environment:
      VITE_BACKEND_API_URL: "http://localhost:${GATEWAY_PORT}"
    ports:
      - "${FRONTEND_PORT}:5173"

  data-engine:
    build: data-engine
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      SENTRY_DSN: ${SENTRY_DSN}
      PORT: ${DATA_ENGINE_PORT}
      TRAIN_MODEL_WEBHOOK_URL: ${TRAIN_MODEL_WEBHOOK_URL}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.warehouseRouter.rule=PathPrefix(`/warehouse`)"
      - "traefik.http.services.warehouseRouter.loadbalancer.server.port=${DATA_ENGINE_PORT}"
      - "traefik.docker.network=traefik-net"
    networks:
      - traefik-net
      - backend-net
    volumes:
      - data-lake:/data
    extra_hosts:
      - "host.docker.internal:host-gateway"

  course-recommendation:
    build: course-recommendation
    environment:
      PORT: ${MODEL_PORT}
      SENTRY_DSN: ${SENTRY_DSN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.recommendationModelRouter.rule=PathPrefix(`/recommendation-model`)"
      - "traefik.http.services.recommendationModelRouter.loadbalancer.server.port=${MODEL_PORT}"
      - "traefik.docker.network=traefik-net"
    networks:
      - traefik-net
      - backend-net
    volumes:
      - data-lake:/data

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - backend-net

  redis:
    image: redis:latest
    volumes:
      - redis-data:/data
    ports:
      - "6380:6379"
    networks:
      - backend-net

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "${SCHEDULER_PORT}:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        # airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        # airflow_version_comparable=$$(ver $${airflow_version})
        # min_airflow_version=2.2.0
        # min_airflow_version_comparable=$$(ver $${min_airflow_version})
        # if (( airflow_version_comparable < min_airflow_version_comparable )); then
        #   echo
        #   echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
        #   echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
        #   echo
        #   exit 1
        # fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ""
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

networks:
  traefik-net: {}
  backend-net: {}

volumes:
  redis-data: {}
  postgres-data: {}
  data-lake: {}
